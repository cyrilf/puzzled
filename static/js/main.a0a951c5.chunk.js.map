{"version":3,"sources":["components/Cell/Cell.js","components/Grid/Grid.js","utils.js","game.js","components/Puzzle/Puzzle.js","components/App/App.js","index.js"],"names":["Cell","_ref","index","number","onClick","react_default","a","createElement","className","concat","Grid","items","map","item","components_Cell_Cell","key","getCoords","gridSize","row","Math","floor","sqrt","column","Game","init","size","this","grid","Object","toConsumableArray","Array","pow","keys","sort","random","generateGrid","won","reset","isNextToEmptyCell","emptyIndex","cellCoords","length","emptyCoords","sameRow","adjacentRow","abs","sameColumn","adjacentColumn","swap","_ref2","swapCell","indexOf","isWon","slice","every","cell","Puzzle","state","game","_this","props","gameWon","onCellClick","_game$swapCell","_game$swapCell2","slicedToArray","setState","onNewPuzzle","_this$state","Fragment","components_Grid_Grid","Component","defaultProps","App","components_Puzzle_Puzzle","ReactDOM","render","components_App_App","document","getElementById"],"mappings":"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","file":"static/js/main.a0a951c5.chunk.js","sourcesContent":["import React from 'react'\nimport PropTypes from \"prop-types\"\n\nimport './Cell.css'\n\nconst Cell = ({ index, number, onClick }) => (\n  <button\n    className={`cell ${index + 1 === number ? 'cell-valid' : ''} ${number === 0 ? 'cell-void' : ''}`}\n    onClick={onClick}>\n    {number}\n  </button>\n)\n\nCell.propTypes = {\n  index: PropTypes.number,\n  number: PropTypes.number,\n  onClick: PropTypes.func,\n}\n\nexport default Cell\n","import React from 'react'\nimport PropTypes from 'prop-types'\n\nimport Cell from '../Cell/Cell'\nimport './Grid.css'\n\nconst Grid = ({ items, onClick }) => {\n  return (\n    <div className=\"grid\">\n      {items.map((item, index) => (\n        <Cell\n          key={index}\n          index={index}\n          number={item}\n          onClick={() => onClick(index)}/>\n      ))}\n    </div>\n  )\n}\nGrid.propTypes = {\n  items: PropTypes.array,\n  onClick: PropTypes.func,\n}\n\n\nexport default Grid\n","export const generateGrid = (size) =>\n  [...Array(size ** 2).keys()].sort(() => Math.random() > 0.5 ? 1 : -1)\n// [1,2,3,4,5,6,7,0,8] // easy to solve solution\n\n// Convert a 1D array index into a 2D index\nexport const getCoords = (index, gridSize) => ({\n  row: Math.floor(index / Math.sqrt(gridSize)),\n  column: Math.floor(index % Math.sqrt(gridSize)),\n})\n","import { generateGrid, getCoords } from './utils'\n\nconst Game = {\n  init({ size }) {\n    this.size = size\n    this.grid = generateGrid(size)\n    this.won = false\n\n    return this.grid\n  },\n\n  reset() {\n    return this.init({size: this.size })\n  },\n\n  isNextToEmptyCell(index, emptyIndex) {\n    const cellCoords = getCoords(index, this.grid.length)\n    const emptyCoords = getCoords(emptyIndex, this.grid.length)\n\n    const sameRow = cellCoords.row === emptyCoords.row\n    const adjacentRow = Math.abs(cellCoords.row - emptyCoords.row) === 1\n    const sameColumn = cellCoords.column === emptyCoords.column\n    const adjacentColumn = Math.abs(cellCoords.column - emptyCoords.column) === 1\n    return (sameRow && adjacentColumn) || (sameColumn && adjacentRow)\n  },\n\n  swap(index, emptyIndex) {\n    [this.grid[index], this.grid[emptyIndex]] = [this.grid[emptyIndex], this.grid[index]]\n  },\n\n  swapCell(index) {\n    const emptyIndex = this.grid.indexOf(0)\n    this.isNextToEmptyCell(index, emptyIndex) && this.swap(index, emptyIndex)\n\n    return [this.grid, this.isWon()]\n  },\n\n  isWon() {\n    this.won = this.grid\n      .slice(0, this.grid.length - 1)\n      .every((cell, index) => cell === index + 1)\n    return this.won\n  }\n}\n\nexport default Game\n","import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\n\nimport Grid from '../Grid/Grid'\nimport game from '../../game'\n\nclass Puzzle extends Component {\n  static propTypes = {\n    size: PropTypes.number\n  }\n\n  static defaultProps = {\n    size: 3\n  }\n\n  state = {\n    grid: game.init({ size: this.props.size }),\n    gameWon: false,\n  }\n\n  onCellClick = (index) => {\n    const [grid, isWon] = game.swapCell(index)\n    this.setState(() => ({ grid, gameWon: isWon }))\n  }\n\n  onNewPuzzle = () => {\n    this.setState(() => ({ grid: game.reset(), gameWon: false }))\n  }\n\n  render() {\n    const { grid, gameWon } = this.state\n\n    return (\n      <>\n        { gameWon\n          ? <div>Congrats!</div>\n          : <Grid items={grid} onClick={this.onCellClick}/>\n        }\n        <button onClick={this.onNewPuzzle}>Restart</button>\n      </>\n    )\n  }\n}\n\nexport default Puzzle\n","import React from 'react'\n\nimport './App.css'\nimport Puzzle from '../Puzzle/Puzzle'\n\nfunction App() {\n  return (\n    <div className=\"app\">\n      <Puzzle size={3}/>\n    </div>\n  )\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\n\nimport './index.css'\nimport App from './components/App/App.js'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}