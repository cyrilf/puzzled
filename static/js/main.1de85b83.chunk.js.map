{"version":3,"sources":["components/Cell/Cell.js","components/Grid/Grid.js","components/Controls/Controls.js","utils.js","game.js","components/Puzzle/Puzzle.js","components/App/App.js","index.js"],"names":["Cell","_ref","index","number","onClick","react_default","a","createElement","className","concat","Grid","items","map","item","components_Cell_Cell","key","Controls","restart","getCoords","gridSize","row","Math","floor","sqrt","column","Game","init","size","_ref$type","type","this","grid","arguments","length","undefined","Object","toConsumableArray","Array","pow","keys","slice","sort","random","generateGrid","won","reset","swapCell","emptyIndex","indexOf","cellCoords","emptyCoords","sameRow","adjacentRow","abs","sameColumn","adjacentColumn","isNextToEmptyCell","array","swapIndex","swap","isWon","every","cell","Puzzle","state","game","_this","props","gameWon","onCellClick","_game$swapCell","_game$swapCell2","slicedToArray","setState","_this$state","Fragment","components_Grid_Grid","components_Controls_Controls","Component","defaultProps","App","components_Puzzle_Puzzle","ReactDOM","render","components_App_App","document","getElementById"],"mappings":"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","file":"static/js/main.1de85b83.chunk.js","sourcesContent":["import React from 'react'\nimport PropTypes from \"prop-types\"\n\nimport './Cell.css'\n\nconst Cell = ({ index, number, onClick }) => (\n  <button\n    className={`cell${index + 1 === number ? ' cell-valid' : ''}${number === 0 ? ' cell-void' : ''}`}\n    onClick={onClick}>\n    {number}\n  </button>\n)\n\nCell.propTypes = {\n  index: PropTypes.number,\n  number: PropTypes.number,\n  onClick: PropTypes.func,\n}\n\nexport default Cell\n","import React from 'react'\nimport PropTypes from 'prop-types'\n\nimport Cell from '../Cell/Cell'\nimport './Grid.css'\n\nconst Grid = ({ items, onClick }) => {\n  return (\n    <div className=\"grid\">\n      {items.map((item, index) => (\n        <Cell\n          key={index}\n          index={index}\n          number={item}\n          onClick={() => onClick(index)}/>\n      ))}\n    </div>\n  )\n}\nGrid.propTypes = {\n  items: PropTypes.array,\n  onClick: PropTypes.func,\n}\n\n\nexport default Grid\n","import React from 'react'\nimport PropTypes from 'prop-types'\n\nimport './Controls.css'\n\nconst Controls = ({ restart }) => (\n  <div className=\"controls\">\n    <button onClick={restart}>Restart</button>\n    <button onClick={() => restart('easy')}>Restart (easy)</button>\n  </div>\n)\nControls.propTypes = {\n  restart: PropTypes.func,\n}\n\nexport default Controls\n","// Generate a grid based on the size\n// - type default is the default behavior\n// - type easy generate a grid solvable in 1 move\nexport const generateGrid = (size, type = 'default') => {\n  let grid = [...Array(size ** 2).keys()]\n\n  if (type === 'easy') {\n    grid = grid.slice(1, size ** 2)\n    return [...grid.slice(0, grid.length - 1), 0, grid[grid.length - 1]]\n  }\n\n  return grid.sort(() => Math.random() > 0.5 ? 1 : -1)\n}\n\n// Convert a 1D array index into a 2D index\nexport const getCoords = (index, gridSize) => ({\n  row: Math.floor(index / Math.sqrt(gridSize)),\n  column: Math.floor(index % Math.sqrt(gridSize)),\n})\n\nexport const isNextToEmptyCell = (index, emptyIndex, gridSize) => {\n  const cellCoords = getCoords(index, gridSize)\n  const emptyCoords = getCoords(emptyIndex, gridSize)\n\n  const sameRow = cellCoords.row === emptyCoords.row\n  const adjacentRow = Math.abs(cellCoords.row - emptyCoords.row) === 1\n  const sameColumn = cellCoords.column === emptyCoords.column\n  const adjacentColumn = Math.abs(cellCoords.column - emptyCoords.column) === 1\n\n  return (sameRow && adjacentColumn) || (sameColumn && adjacentRow)\n}\n\nexport const swap = (array, index, swapIndex) =>\n  [array[index], array[swapIndex]] = [array[swapIndex], array[index]]\n","import { generateGrid, swap, isNextToEmptyCell } from './utils'\n\nconst Game = {\n  init({ size, type = 'default' }) {\n    this.size = size\n    this.grid = generateGrid(size, type)\n    this.won = false\n\n    return this.grid\n  },\n\n  reset(type) { return this.init({size: this.size, type }) },\n\n  swapCell(index) {\n    const emptyIndex = this.grid.indexOf(0)\n    isNextToEmptyCell(index, emptyIndex, this.grid.length) && swap(this.grid, index, emptyIndex)\n\n    return [this.grid, this.isWon()]\n  },\n\n  isWon() {\n    this.won = this.grid\n      .slice(0, this.grid.length - 1)\n      .every((cell, index) => cell === index + 1)\n    return this.won\n  }\n}\n\nexport default Game\n","import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\n\nimport Grid from '../Grid/Grid'\nimport Controls from '../Controls/Controls'\nimport game from '../../game'\nimport './Puzzle.css'\n\nclass Puzzle extends Component {\n  static propTypes = {\n    size: PropTypes.number\n  }\n\n  static defaultProps = {\n    size: 3\n  }\n\n  state = {\n    grid: game.init({ size: this.props.size }),\n    gameWon: false,\n  }\n\n  onCellClick = (index) => {\n    const [grid, isWon] = game.swapCell(index)\n    this.setState(() => ({ grid, gameWon: isWon }))\n  }\n\n  restart = (type) => { this.setState(() => ({ grid: game.reset(type), gameWon: false })) }\n\n  render() {\n    const { grid, gameWon } = this.state\n\n    return (\n      <>\n        { gameWon\n          ? <div className=\"congrats\">Congrats!</div>\n          : <Grid items={grid} onClick={this.onCellClick}/>\n        }\n        <Controls restart={this.restart}/>\n      </>\n    )\n  }\n}\n\nexport default Puzzle\n","import React from 'react'\n\nimport './App.css'\nimport Puzzle from '../Puzzle/Puzzle'\n\nfunction App() {\n  return (\n    <div className=\"app\">\n      <h1>Puzzled</h1>\n      <Puzzle size={3}/>\n    </div>\n  )\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\n\nimport './index.css'\nimport App from './components/App/App.js'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}